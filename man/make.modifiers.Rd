% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make.modifiers.R
\name{make.modifiers}
\alias{make.modifiers}
\title{make.modifiers}
\usage{
make.modifiers(
  branch.length,
  speciation,
  condition,
  modify,
  add,
  test = TRUE,
  ...
)
}
\arguments{
\item{branch.length}{A function for the waiting time generating branch length (see details).}

\item{speciation}{A function for triggering the speciation events (see details).}

\item{condition}{A function giving the condition on which to modify the output of \code{branch.length} or \code{speciation} (see details). If missing the condition is always met (set to \code{condition = function() TRUE})}

\item{modify}{A function giving the rule of how to modify the output of \code{branch.length} or \code{speciation} (see details). If missing no modification is used (set to \code{modify = function(x) x}).}

\item{add}{Whether to add this modifier to a \code{"dads"} \code{"modifier"} object.}

\item{test}{Logical whether to test if the modifiers object will work (default is TRUE),}

\item{...}{Optional, any extra argument to be passed to the modifier function.}
}
\description{
Making modifiers objects for dads based on an ancestor's (parent) trait.
}
\details{
\code{branch.length} and \code{speciation} must be a functions that intakes the following arguments: \code{bd.params = NULL, n.taxa = NULL, parent.lineage = NULL, trait.values = NULL, modify.fun}.

\code{condition} must be a function with unambiguous input (the inputs listed about for \code{branch.length} and \code{speciation}) and must output a single \code{logical} value. For example a conditional on the number of taxa:

\code{condition = function(n.taxa) return(n.taxa < 1)}

or a conditional on the trait values:

\code{condition = function(trait.values, parent.lineage)}
\code{    \{}
\code{    get.parent.traits(trait.values, parent.lineage) < mean(trait.values)}
\code{    \}}

\code{modify} must be a function with at least one input named \code{x} (which will be the branch length or the speciation trigger to value depending on the modifier) and must return a \code{numeric} value.
For example a constant modification of the input:

\code{modify = function(x) return(x * 2)}

or a modifier depending on the number of taxa:

\code{modify = function(x, n.taxa) return(x/n.taxa)}

More details about the \code{modifiers} functions is explained in the \code{dads} manual: \url{http://tguillerme.github.io/dads}.
}
\examples{

}
\seealso{

}
\author{
Thomas Guillerme
}
